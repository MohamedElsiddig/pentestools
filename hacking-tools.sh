#!/bin/bash

############################################################

#Make Sure to execute the Script from your home directory

############################################################


#
##################################################
#Check internet connection function
##################################################

function chick_net()
{
    echo -e $cyan "[ * ] Checking for internet connection"
sleep 1
echo -e "GET http://google.com HTTP/1.0\n\n" | nc google.com 80 > /dev/null 2>&1
if [ $? -ne 0 ]; then
    echo -e $red [ X ]::$white[Internet Connection]:$red OFFLINE! $normal;
    chknet
    sleep 1
else
    echo -e $light_green [ ✔ ]$white::$white[Internet Connection]:$light_green CONNECTED! $normal;
    sleep 1
    install_essential
    install_pentesting
fi
}

##################################################
#Check internet connection problem if found function
##################################################

function chknet() {
echo -e $red "[X] Your Internet is not working correctly!" $normal
sleep 1
echo -e $cyan "[*] Checking ...."
#ping hostname failed , so now will test ping google ip dns server
ping -c 1 8.8.4.4 > /dev/null 2>&1
png="$?" 
if [ $png == "0" ]
then
#Ping dns server worked , inform user what happened and proceed with setup
    echo -e $red "[X] Your linux OS is not able to resolve" $normal
    echo -e $red "hostnames over terminal using ping !!"
    echo ""
    echo -e $yellow "Search on the web : (unable to resolve hostnames ping) to find a solution" $normal
echo ""
echo -e $green "Setup will continue , but is not garantee that apt package management 
may work properly , or even if it can resolve hostnames ." $normal
echo ""
echo -e $cyan "Setup will continue because :" $normal
echo -e $green "Ping google.com =$red Failed" $normal
echo -e $green "Ping google DNS = Success" $normal
echo ""
echo -e $green "Press [ENTER] key to continue" $normal
read continue
cont
    sleep 1
elif [ $png == "1" ]
then
#user is only connected to lan and not to the web , abort setup
    echo -e $yellow "You are connected to your local network but not to the web ." $normal
    echo -e $yellow "Check if your router/modem gateway is connected to the web ." $normal
echo ""
echo -e $green "Setup will not continue , you are only connected to your local lan." $normal
echo ""
echo -e $cyan "Setup will stop because :" $normal
echo -e $green "Ping google.com =$red Failed" $normal
echo -e $green "Ping google DNS =$red Failed" $normal
echo ""
echo -e $green "Press [ENTER] key to continue" $normal
read continue
exit 1
sleep 1
elif [ $png == "2" ]
then
# user is not connected to anywhere , web or lan , abort setup
echo -e $red "You are not connected to any network ." $normal
echo ""
echo -e $cyan "Setup will stop because :" $normal
echo -e $green "Ping google.com =$red Failed$normal"
echo -e $green "Ping google DNS =$red Failed$normal"
echo ""
echo -e $green "Press [ENTER] key to continue$normal"
read continue
exit 1
    sleep 1
fi
}

##################################################
#installing Essential programs function
##################################################

function install_essential()
{   
    echo ""
    echo -e $orange "☣ INSTALL ESSENTIAL PROGRAMS☣" $normal
    echo ""
    sleep 1
    #echo -e $shadow_color "Checking if xterm were installed" $normal
    echo ""
    which xterm > /dev/null 2>&1
if [ "$?" -eq "0" ]; then
    echo -e $green "[ ✔ ]$white Xterm.............................$green[ found ]"$normal
else
    echo ""
    echo -e $red "[ X ]$white Xterm ->$red not found! "$normal
    echo -e $yellow "[ ! ] Installing Xterm                     "$normal
    echo -e $green ""
    sudo apt-get install xterm -y > /dev/null 2>&1
    which xterm > /dev/null 2>&1
    if [ "$?" -e1 "0" ];then
        echo -e $green "[ ✔ ]$white Xterm.............................$green[ Installed Successfuly ]"$normal
    fi
fi
sleep 1
echo ""
    #echo -e $shadow_color "Checking if net-tools were installed" $normal
    echo ""
    which ifconfig > /dev/null 2>&1
if [ "$?" -eq "0" ]; then
    echo -e $green "[ ✔ ]$white net-tools.............................$green[ found ]"$normal
else
    echo ""
    echo -e $red "[ X ]$white net-tools ->$red not found! "$normal
    echo -e $yellow "[ ! ] Installing net-tools                     "$normal
    echo -e $green ""
    xterm -T "☣ INSTALL NET-TOOLS ☣" -geometry 100x30 -e "sudo apt-get install net-tools -y"
    which ifconfig > /dev/null 2>&1
    if [ "$?" -e1 "0" ];then
        echo -e $green "[ ✔ ]$white Net-Tools.............................$green[ Installed Successfuly ]"$normal
    fi
fi
sleep 1
echo ""
    #echo -e $shadow_color "Checking if netdiscover were installed" $normal
    echo ""
    which netdiscover > /dev/null 2>&1
if [ "$?" -eq "0" ]; then
    echo -e $green "[ ✔ ]$white netdiscover.............................$green[ found ]"$normal
else
    echo ""
    echo -e $red "[ X ]$white netdiscover ->$red not found! "$normal
    echo -e $yellow "[ ! ] Installing netdiscover                     "$normal
    xterm -T "☣ INSTALL NetDiscover ☣" -geometry 100x30 -e "sudo apt-get install netdiscover -y"
    which netdiscover > /dev/null 2>&1
    if [ "$?" -e1 "0" ];then
        echo -e $green "[ ✔ ]$white Netdiscover.............................$green[ Installed Successfuly ]"$normal
    fi
    
fi
sleep 1
echo ""
    #echo -e $shadow_color "Checking if git were installed" $normal
    echo ""
    which git > /dev/null 2>&1
if [ "$?" -eq "0" ]; then
    echo -e $green "[ ✔ ]$white Git.............................$green[ found ]"$normal
else
    echo ""
    echo -e $red "[ X ]$white Git ->$red not found! "$normal
    echo -e $yellow "[ ! ] Installing git                     "$normal
    xterm -T "☣ INSTALL git ☣" -geometry 100x30 -e "sudo apt-get install git -y"
    which git > /dev/null 2>&1
    if [ "$?" -e1 "0" ];then
        echo -e $green "[ ✔ ]$white Git.............................$green[ Installed Successfuly ]"$normal
    fi
    
fi
sleep 1
echo ""
    #echo -e $shadow_color "Checking if tor were installed" $normal
    echo ""
    which tor > /dev/null 2>&1
if [ "$?" -eq "0" ]; then
    echo -e $green "[ ✔ ]$white Tor Service..........................$green[ found ]"$normal
else
    echo ""
    echo -e $red "[ X ]$white tor ->$red not found! "$normal
    echo -e $yellow "[ ! ] Installing tor                     "$normal
    xterm -T "☣ INSTALL tor ☣" -geometry 100x30 -e "sudo apt-get install tor -y"
    which tor > /dev/null 2>&1
    if [ "$?" -e1 "0" ];then
        echo -e $green "[ ✔ ]$white Tor Service............................$green[ Installed Successfuly ]"$normal
    fi
    
fi
sleep 1

echo ""
    #echo -e $shadow_color "Checking if proxychains were installed" $normal
    echo ""
    which proxychains > /dev/null 2>&1
if [ "$?" -eq "0" ]; then
    echo -e $green "[ ✔ ]$white proxychains.............................$green[ found ]"$normal
else
    echo ""
    echo -e $red "[ X ]$white proxychains ->$red not found! "$normal
    echo -e $yellow "[ ! ] Installing proxychains                     "$normal
    xterm -T "☣ INSTALL proxychains ☣" -geometry 100x30 -e "sudo apt-get install proxychains -y"
    which proxychains > /dev/null 2>&1
    if [ "$?" -e1 "0" ];then
        echo -e $green "[ ✔ ]$white Proxychains.............................$green[ Installed Successfuly ]"$normal
    fi
    
fi

sleep 1
echo ""
    #echo -e $shadow_color "Checking if nmap were installed" $normal
    echo ""
    which nmap > /dev/null 2>&1
if [ "$?" -eq "0" ]; then
    echo -e $green "[ ✔ ]$white nmap.............................$green[ found ]"$normal
else
    echo ""
    echo -e $red "[ X ]$white nmap ->$red not found! "$normal
    echo -e $yellow "[ ! ] Installing nmap                     "$normal
    xterm -T "☣ INSTALL nmap ☣" -geometry 100x30 -e "sudo apt-get install nmap -y"
    which nmap > /dev/null 2>&1
    if [ "$?" -e1 "0" ];then
        echo -e $green "[ ✔ ]$white Nmap.............................$green[ Installed Successfuly ]"$normal
    fi
    
fi
sleep 1
echo ""
    #echo -e $shadow_color "Checking if zenmap were installed" $normal
    echo ""
    which zenmap > /dev/null 2>&1
if [ "$?" -eq "0" ]; then
    echo -e $green "[ ✔ ]$white zenmap.............................$green[ found ]"$normal
else
    echo ""
    echo -e $red "[ X ]$white zenmap ->$red not found! "$normal
    echo -e $yellow "[ ! ] Installing zenmap                     "$normal
    xterm -T "☣ INSTALL zenmap ☣" -geometry 100x30 -e "sudo apt-get install zenmap -y"
    which zenmap > /dev/null 2>&1
    if [ "$?" -e1 "0" ];then
        echo -e $green "[ ✔ ]$white Zenmap.............................$green[ Installed Successfuly ]"$normal
    fi
    
fi
sleep 1
echo ""
    #echo -e $shadow_color "Checking if john were installed" $normal
    echo ""
    which john > /dev/null 2>&1
if [ "$?" -eq "0" ]; then
    echo -e $green "[ ✔ ]$white john.............................$green[ found ]"$normal
else
    echo ""
    echo -e $red "[ X ]$white john ->$red not found! "$normal
    echo -e $yellow "[ ! ] Installing john                     "$normal
    xterm -T "☣ INSTALL john ☣" -geometry 100x30 -e "sudo apt-get install john -y"
    which john > /dev/null 2>&1
    if [ "$?" -e1 "0" ];then
        echo -e $green "[ ✔ ]$white John.............................$green[ Installed Successfuly ]"$normal
    fi
    
fi
sleep 1
echo ""
    #echo -e $shadow_color "Checking if aircrack-ng were installed" $normal
    echo ""
    which aircrack-ng > /dev/null 2>&1
if [ "$?" -eq "0" ]; then
    echo -e $green "[ ✔ ]$white aircrack-ng.............................$green[ found ]"$normal
else
    echo ""
    echo -e $red "[ X ]$white aircrack-ng ->$red not found! "$normal
    echo -e $yellow "[ ! ] Installing aircrack-ng                     "$normal
    xterm -T "☣ INSTALL aircrack-ng ☣" -geometry 100x30 -e "sudo apt-get install aircrack-ng -y"
    which aircrack-ng > /dev/null 2>&1
    if [ "$?" -e1 "0" ];then
        echo -e $green "[ ✔ ]$white Aircrack-ng.............................$green[ Installed Successfuly ]"$normal
    fi
    
fi
sleep 1
echo ""
echo ""
which java > /dev/null 2>&1
if [ "$?" -eq "0" ]; then
    echo -e $green "[ ✔ ]$white java.............................$green[ found ]"$normal
else
    echo ""
    echo -e $red "[ X ]$white java ->$red not found! "$normal
    echo -e $yellow "[ ! ] Installing java                     "$normal
    xterm -T "☣ INSTALL java ☣" -geometry 100x30 -e "sudo apt-get install openjdk-8-jdk openjdk-8-jre --force-yes -y "
    which java > /dev/null 2>&1
    if [ "$?" -e1 "0" ];then
        echo -e $green "[ ✔ ]$white Java.............................$green[ Installed Successfuly ]"$normal
    fi
    
fi
sleep 1
echo ""
which hydra > /dev/null 2>&1
if [ "$?" -eq "0" ]; then
    echo -e $green "[ ✔ ]$white Hydra & Hydra-GTK.............................$green[ found ]"$normal
else
    echo ""
    echo -e $red "[ X ]$white Hydra ->$red not found! "$normal
    echo -e $yellow "[ ! ] Installing hydra                     "$normal
    xterm -T "☣ INSTALL Hydra ☣" -geometry 100x30 -e "sudo apt-get install hydra hydra-gtk -y "
    which hydra > /dev/null 2>&1
    if [ "$?" -e1 "0" ];then
        echo -e $green "[ ✔ ]$white Hydra & Hydra-gtk........................$green[ Installed Successfuly ]"$normal
    fi
    
fi

}

##################################################
#install pentest tools function
##################################################

function install_pentesting()
{
    echo ""
    echo -e $orange "☣ INSTALLING Penetratin Testing Main Tools" $normal
    echo ""
    echo -e $cyan "☣ INSTALLING Metasploit framework" $normal
    echo""
    case $arch in
        x86_64|aarch64)
            echo -e $yellow "| Checking For any previous installation |"$normal
            sleep 1
            which msfconsole > /dev/null 2>&1
            if [ "$?" -eq "0" ]; then
                echo -e $green "[ ✔ ]$white Metasploit......................$green[ Installed ]"$normal
                echo ""
            else
                echo -e $yellow "Getting Binaries For x86_64bit systems"$normal
                xterm -T "☣ Getting Metasploit ☣" -geometry 100x30 -e "proxychains wget https://apt.metasploit.com/pool/main/m/metasploit-framework/metasploit-framework_4.17.25%2B20181115104110~1rapid7-1_amd64.deb"
                sudo dpkg -i $path/metasploit-framework_4.17.25+20181115104110~1rapid7-1_amd64.deb > /dev/null 2>&1
                which msfconsole > /dev/null 2>&1
                if [ "$?" -eq "0" ]; then
                    echo -e $green "[ ✔ ]$white Metasploit......................$green[ Installed Successfully ]"$normal
                else
                    echo -e $red "[ X ] failed To install Metasploit Exiting now !!"$normal
                    sleep 2
                    exit 1
                fi
            fi

    ;;
        i386|i486|i586|i686)
            echo -e $yellow "| Checking For any previous installation |"$normal
            sleep 1
            which msfconsole > /dev/null 2>&1
            if [ "$?" -eq "0" ]; then
                echo -e $green "[ ✔ ]$white Metasploit......................$green[ Installed ]"$normal
                echo ""
            else
                echo -e $yellow "Getting Binaries For 32bit systems"$normal
                xterm -T "☣ Getting Metasploit ☣" -geometry 100x30 -e "proxychains wget https://apt.metasploit.com/pool/main/m/metasploit-framework/metasploit-framework_4.17.25%2B20181109103846~1rapid7-1_i386.deb"
                sudo dpkg -i $path/metasploit-framework_4.17.25+20181109103846~1rapid7-1_i386.deb > /dev/null 2>&1
                which msfconsole > /dev/null 2>&1
                if [ "$?" -eq "0" ]; then
                    echo -e $green "[ ✔ ]$white Metasploit......................$green[ Installed Successfully ]"$normal
                    else
                    echo -e $red "[ X ] Failed To install Metasploit Exiting now !!"$normal
                    sleep 2
                    exit 1
                fi
            fi

    ;;
        *)
            echo -e $red "Setup will not proceed because none of these archs were detected"$normal
            echo ""
            echo -e $blue "x86_64|i386|i486|i586|i686|aarch64"$normal
            echo ""
            echo -e $green "Your linux arch: $blue $arch $green is not supported"$normal
            echo ""
            echo -e "Press any key to continue"
            read abor
            exit 0
    ;;
    esac

    echo ""
    echo -e $cyan "☣ INSTALLING Metasploit Graphical user Interface" $normal
    echo ""
    echo -e $yellow "| Checking For any previous installation |"$normal
    sleep 1
    which msfgui > /dev/null 2>&1
    if [ "$?" -eq "0" ]; then
        echo -e $green "[ ✔ ]$white Metasploit GUI......................$green[ Installed ]"$normal
        echo ""
    else
        echo -e $yellow "Getting it from github.com/scriptjunkie/msfgui"$normal
        git clone https://github.com/scriptjunkie/msfgui.git /usr/share/msfgui > /dev/null 2>&1
        echo ""
        echo -e $yellow "Creating Dynamic link"$normal
        ln -svf /usr/share/msfgui/msfgui /usr/bin/msfgui > /dev/null 2>&1
        which msfgui > /dev/null 2>&1
            if [ "$?" -eq "0" ]; then
                echo -e $green "[ ✔ ]$white Metasploit GUI......................$green[ Installed Successfully ]"$normal
            else
                echo -e $red "[ X ] Failed To install Metasploit GUI Exiting now !!"$normal
                sleep 2
                exit 1
            fi
    fi

    echo ""
    echo -e $cyan "☣ INSTALLING Armitage" $normal
    echo ""
    echo -e $yellow "| Checking For any previous installation |"$normal
    sleep 1
    which armitage > /dev/null 2>&1
    if [ "$?" -eq "0" ]; then
        echo -e $green "[ ✔ ]$white Armitage......................$green[ Installed ]"$normal
        echo ""
    else
    echo -e $yellow "Getting it from fastandeasyhacking.com"$normal
    wget http://www.fastandeasyhacking.com/download/armitage150813.tgz  > /dev/null 2>&1
    echo -e $yellow "Extracting Armitage"$normal
    tar -xvf $path/armitage150813.tgz > /dev/null 2>&1
    mv -f $path/armitage /opt/ > /dev/null 2>&1
    echo -e $yellow "Creating Dynamic link"$normal
    ln -svf /opt/armitage/armitage.jar /usr/bin/armitage > /dev/null 2>&1
    chmod 777 /opt/armitage/armitage.jar && chmod 777 /opt/armitage/armitage
    which armitage > /dev/null 2>&1
            if [ "$?" -eq "0" ]; then
                echo -e $green "[ ✔ ]$white Armitage......................$green[ Installed Successfully ]"$normal
                for dir in /home/*  
                do
                    if [ -d $dir ] 
                        then
                            echo "export MSF_DATABASE_CONFIG=$dir/.msf4/database.yml"  >> $dir/.bashrc 
                            echo "alias armitage='java -jar /opt/armitage/armitage.jar'" >> $dir/.bashrc
                    fi
                done
            else
                echo -e $red "[ X ] Failed To install Armitage Exiting now !!"$normal
                sleep 2
                exit 1
            fi
    fi
    echo ""
    echo -e $cyan "☣ INSTALLING Mentalist" $normal
    case $arch in
        x86_64|aarch64) 
            echo ""
            echo -e $yellow "| Checking For any previous installation |"$normal
            sleep 1
            which mentalist > /dev/null 2>&1
            if [ "$?" -eq "0" ]; then
                echo -e $green "[ ✔ ]$white Mentalist......................$green[ Installed ]"$normal
                echo ""
            else
                echo -e $yellow "Getting Binaries For x86_64bit systems"$normal
                xterm -T "☣ Getting Mentalist ☣" -geometry 100x30 -e "wget https://github.com/sc0tfree/mentalist/releases/download/v1.0/Mentalist-v1.0-Linux-x86_64.zip"
                unzip $path/Mentalist-v1.0-Linux-x86_64.zip > /dev/null 2>&1
                mv -v $path/Mentalist  /usr/bin/mentalist > /dev/null 2>&1
                which mentalist > /dev/null 2>&1
                if [ "$?" -eq "0" ]; then
                    echo -e $green "[ ✔ ]$white Mentalist......................$green[ Installed Successfully ]"$normal
                else
                    echo -e $red "[ X ] failed To install Mentalist Exiting now!!"$normal
                    sleep 2
                    exit 1
                fi
            fi
    echo ""
    ;;
        i386|i486|i586|i686)
            echo ""
            echo -e $yellow "| Checking For any previous installation |"$normal
            sleep 1
            which mentalist > /dev/null 2>&1
            if [ "$?" -eq "0" ]; then
                echo -e $green "[ ✔ ]$white Mentalist......................$green[ Installed ]"$normal
                echo ""
            else
                echo -e $yellow "Getting Binaries For 32bit systems"$normal
                xterm -T "☣ Getting Mentalist ☣" -geometry 100x30 -e "wget https://github.com/sc0tfree/mentalist/releases/download/v1.0/Mentalist-v1.0-Linux-x86.zip"
                unzip $path/Mentalist-v1.0-Linux-x86.zip > /dev/null  2>&1
                mv -v $path/Mentalist  /usr/bin/mentalist > /dev/null 2>&1
                which mentalist > /dev/null 2>&1
                if [ "$?" -eq "0" ]; then
                    echo -e $green "[ ✔ ]$white Mnetalist......................$green[ Installed Successfully ]"$normal
                else
                    echo -e $red "[ X ] Failed To install Mentalist Exiting now !!"$normal
                    sleep 2
                    exit 1
                fi
            fi
    ;;
        *)
            echo -e $red "Setup will not proceed because none of these archs were detected"$normal
            echo ""
            echo -e $blue "x86_64|i386|i486|i586|i686|aarch64"$normal
            echo ""
            echo -e $green "Your linux arch: $blue $arch $green is not supported"$normal
            echo ""
            echo -e "Press any key to continue"
            read abor
            exit 0
    ;;
    esac
    echo ""
    echo -e $cyan "☣ INSTALLING Social Engineering Toolkit" $normal
    echo ""
    echo -e $yellow "| Checking For any previous installation |"$normal
    sleep 1
    which setoolkit > /dev/null 2>&1
    if [ "$?" -eq "0" ]; then
        echo -e $green "[ ✔ ]$white Social Engineering Toolkit.....................$green[ Installed ]"$normal
        echo ""
    else
        echo -e $yellow "☣ INSTALL SETTOOLKIT DEPENDENCIES ☣"$normal
        apt-get -y install git apache2 python-requests libapache2-mod-php \
        python-pymssql build-essential python-pexpect python-pefile python-crypto python-openssl > /dev/null 2>&1
        echo ""
        echo -e $yellow "☣ Getting sorce from github.com/trustedsec/social-engineer-toolkit ☣"$normal
        git clone https://github.com/trustedsec/social-engineer-toolkit.git > /dev/null 2>&1
        python $path/social-engineering-toolkit/setup.py install  > /dev/null 2>&1
        which setoolkit > /dev/null 2>&1
        if [ "$?" -eq "0" ]; then
            echo -e $green "[ ✔ ]$white Social Engineering Toolkit.....................$green[ Installed Successfully ]"$normal
        else
            echo -e $red "[ X ] Failed To install Social Engineering Toolkit Exiting now !!"$normal
            sleep 2
            exit 1
        fi
    fi
    sleep 2
    echo ""
    echo -e $light_green "☣ Cleaning Intallation Remnants"
    rm -rf Mentalist*
    rm -rf armitage*
    rm -rf metasploit-framework*
    sleep 2
    echo ""
    echo -e $light_cyan "☣ Installation Complete , Happy Hunting !! " $normal
    sleep 2
    echo ""

}


##################################################

#The script Start From Here
#All of the above are functions

##################################################

normal='\e[0m'
cyan='\e[0;36m'
green='\e[0;32m'
light_green='\e[1;32m'
white='\e[0;37m'
red='\e[1;31m'
yellow='\e[0;33m'
blue='\e[0;34m'
orange='\e[38;5;166m'
shadow_color='\e[31;43m'
light_cyan='\e[1;36m'
path=`pwd`
arch=`uname -m`


if [ $UID != 0 ] 
then
    echo -e $red [x]$cyan::[$red You are not root $cyan]: You need to be [$red root $cyan] to run this script.$normal
    echo ""
    sleep 3
    exit 0
fi

clear
clear
echo -e "\t\t\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
echo -e "\tThis Script is goning to install some of famous pentesting tools on your machiane \n"
echo -e "\t\t\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo ""
echo -e "\t\t#######################################################################"
echo -e "\t\t#\t\t     Written By Mohamed Elsiddig                      #"
echo -e "\t\t#######################################################################\n"
echo ""
echo -e " $yellow[*]$normal$white The following tools are goning to be installed with there dependencies"
echo ""
echo -e "\t$light_cyan[1]$normal$white Net-tools [ ifconfig command ]"
echo -e "\t$light_cyan[2]$normal$white Netdiscover"
echo -e "\t$light_cyan[3]$normal$white Git"
echo -e "\t$light_cyan[4]$normal$white Nmap & Zenmap"
echo -e "\t$light_cyan[5]$normal$white John The Ripper & Mentalist [ Cracking and Generating passwords ]"
echo -e "\t$light_cyan[6]$normal$white Hydra [ Including Hudra-gtk ]"
echo -e "\t$light_cyan[7]$normal$white Aircrack-ng"
echo -e "\t$light_cyan[8]$normal$white Tor service & Proxychains"
echo -e "\t$light_cyan[9]$normal$white Social Engineering Toolkit"
echo -e "\t$light_cyan[10]$normal$white Metasploit Framework [ Including Metasploit GUI & Armitage ]\n"
echo -en " $yellow[*]$normal$white Do You want to proceed The installtion [y/n]: "$normal
read  var
echo " "

# Fixing any possible problems with packages missed/corrupted dependencies on user OS before proceed
if [ -z $var ] 
    then
        echo -e "$red Wrong input $orange[Please Enter \"y\" or \"n\" ]$normal"
elif [[ -n $var  && $var = "y" || $var = "Y" ]]
    then
        echo -e $green "[ * ] Fixing any possible broken packages in apt management"
        sleep 1
        echo -e $white ""
        sudo apt-get install -f -y && sudo apt-get autoremove -y
        sleep 1
        echo ""
        echo -e $yellow "[ ✔ ] Done ! ....Proceeding with setup"
        echo ""
        sleep 2

        clear

        case $arch in
            x86_64|aarch64) 
                echo -e $yellow "              64Bit OS detected"
                echo ""
        ;;
            i386|i486|i586|i686)
                echo -e $yellow "              32Bit OS detected"
                echo ""
        ;;
            *)
                echo -e $cyan "Unknown OS Arch ??!!" $normal
        esac

        chick_net

elif [[ -n $var && $var = "n" || $var = "N" ]] 
    then
        echo -e $orange "Quiting The Script \n" $normal
else
        echo -e $red\"$var\"$normal$orange is not an option$orange "Quiting The Script \n" $normal
fi
